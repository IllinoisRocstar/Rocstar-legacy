///
/// @page ir_documentation_guide IR Documentation Guide
/// 
/// @section code_sec Documenting Code 
/// General notes & guidelines:
/// * Doxygen is used to generate source code documentation
/// * Most Doxygen comments should be in the header files
/// * Use mostly regular comments in implementations (i.e. source files).  
/// * Use \@command style, and <b>not</b> \\command style Doxygen commands.
/// 
/// @subsection files_sec File documentation
/// Required Doxygen tags
/// * \@file
/// * \@brief
/// * \@author
/// 
/// @subsection class_sec Class documentation
/// All classes should have a brief and detailed description that at least
/// indicates what the class does.  If the class has public or protected 
/// members, then those should be documented as follows:
/// @subsubsection member_data_sec Member Data
/// * \@brief
///
/// @subsubsection member_methods Methods (including stand-alone non-member functions)
/// For functions, please include the parameter descriptions <b>before</b> the 
/// further details about usage, limitations, etc.  In general, the more than 
/// can be said about a function, the better.
/// * \@brief
/// * \@param
/// * \@returns
/// * Detailed description
///
/// @subsection program_sec Program documentation
/// * \@brief
/// * Detailed description including usage information
/// 
/// @subsection other_sec Other code constructs
/// * \@brief
///
/// @section comment_formats Formats for Code Comments
/// [Doxygen](http://www.stack.nl/~dimitri/doxygen/ "Doxygen") 
/// interprets special commands and formatting in comments to 
/// generate documentation for your code and project.  The following
/// is meant to be a summary of some of the most useful commands and
/// formats.  
///
/// All of the documentation below is generated by the file:
/// <tt>doc/Documentation.dox</tt>\n
/// Open it in your favorite editor to see how the documentation
/// constructs below are created from comment formatting.
///
/// Markdown formats, and some html tags
/// can be used inline with your comments.
/// 
/// * Element 1
/// * Element 2
/// * Element 3
/// 
/// Lists of numbered items are created like this...
///
/// 1. Element 1
/// 2. Element 2
/// 3. Element 3
///
/// Embed links in your documentation like this... \n
/// [IRPMI](http://ilrocstar13.incubator.illinois.edu/redmine "This is the link title")\n
///
///
/// And blockquotes can be made like this...
/// 
/// > Use blockquotes especially when documenting user
/// > commands and stuff like that.
/// > New lines are ignored internally but can be done\n
/// > by forcing with "\n"
///
/// Blockquotes can also be created with...
///
/// <blockquote>
/// This text will be block-quoted.\n
/// The blockquote continues on the next line.
/// </blockquote>
///
/// Note the explicit forcing of a newline with "\n".
///
/// 
/// Different kinds of headers can be created like these...
///
/// This is a first level header
/// ===========================
///
/// This is a second level header
/// ---------------------------
/// 
/// ###Third level header
///
/// You can also have _italics_ and **bold** or <b>bold</b>.
///
/// Here's a simple table:
/// | Type  |     Description    |      Usage     |    Value        |
/// | ----: | :----------------: | :------------: | :-------------- |
/// |  0    | simple flag        | -t             | .true.          |
/// |  1    | argument optional  | -t or -t [arg] | .true. or [arg] |
/// |  2    | argument required  | -t \<arg\>     | \<arg\>         |
/// |  3    | required w/arg     | -t \<arg\>     | \<arg\>         |
///
