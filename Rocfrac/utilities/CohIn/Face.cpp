/* Generated by Together */

#include "Face.hpp"
#include "TriFace.hpp"
#include "QuadFace.hpp"
#include "Mesh.hpp"

Mesh* Face::s_mesh = 0;

Face::Face(Face::Type ftype):
  d_ID(-1),
  d_flag(-1),
  d_E1(0),
  d_E2(0),
  d_nodes(0),
  d_eType( ftype )
{}

Face::Face():
  d_ID(-1),
  d_flag(-1),
  d_E1(0),
  d_E2(0),
  d_nodes(0)
{}

Face::~Face(){

  if( d_nodes ){
    delete [] d_nodes;
  }
}

Face* Face::create(Face::eType type ){

  Face *face;  

  switch( type ){
  case e_hex:
    face = new QuadFace();
    break;
  case e_tet:
    face = new TriFace();
    break;
  case e_tri_cohesive:
    face = new TriFace();
    break;
  case e_quad_cohesive:
    face = new QuadFace();
    break;
  default:
    cerr << "BUG: Illegal element type in Face::create " << type << endl;
  }
  
  return face;
}


ostream& operator<<(ostream& stream, Face& face){

  return stream;
}

istream& operator>>(istream& stream, Face& face){

  // read nodes & set

  int numn = face.getNumNodes();
  int i;
  for( i = 0; i < numn; i++ ){
    int node_id;
    stream >> node_id;
    Node *node = face.s_mesh->getNode(node_id);
    face.d_nodes[i] = node;
  }
  
  return stream;

}

void Face::removeElement(Element * theElement){

  if( theElement == d_E1 ){
    d_E1 = d_E2;
    d_E2 = 0;
  }
  else if( theElement == d_E2 ){
    d_E2 = 0;
  }
}


void Face::replaceNode (Node *node, Node *new_node ) {

  int i;
  int numn = getNumNodes();
  for( i = 0; i< numn; i++ ){
    if( d_nodes[i] == node ){
      d_nodes[i] = new_node;
      node->removeFace( this );
      new_node->addFace( this );
    }
  }
}



boolean Face::containsNode( Node* node ) const {

  int i;
  int numn = getNumNodes();
  for( i = 0; i< numn; i++ ){
    if( d_nodes[i] == node ){
      return TRUE;
    }
  }
  return FALSE;
}

