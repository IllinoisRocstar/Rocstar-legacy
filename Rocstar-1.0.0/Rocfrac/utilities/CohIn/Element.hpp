/* Generated by Together */

#ifndef ELEMENT_H
#define ELEMENT_H

#include <iostream.h>
#include "Face.hpp"

class Node;
class Mesh;

class Element {
public:

  enum Type {
        e_tet,      // 0
        e_hex,      // 1
        e_tri_cohesive,  // 2
        e_quad_cohesive,  // 3
        e_MAX_TYPE
  };
  
  enum fType {e_tri,			//0
  			  e_quad,			//1
  			  e_MAX_FACE_TYPE};
  
  //static fType getFaceType(Element::Type type);

  enum MaterialType{
         e_unset_material = -1
  };

  Element( Type type);
  
  ~Element();

  static Element* create( int id, Type type );


  static void setMesh( Mesh* emesh );

  int getID() const;
  
  void setID(int theID);

  virtual int getNumNodes() const = 0;
  Node** getNodes();

  virtual int getNumFaces() const = 0;
  Face** getFaces();
  
  Type getElementType() const;

  boolean isCohesive() const;


  int  getMaterialType() const;
  void  setMaterialType( int mtype );

  virtual void setFromNodes(Node ** thenodes);

  void replaceNode (Node *node, Node *new_node);

  void replaceFace (Face *face, Face *new_face);

  virtual void replaceFaceNode (Node *node, Node *new_node, Face* face );
  
  virtual double getMinEdgeLength();

  friend istream& operator>>(istream& stream, Element& elem);
  
  friend ostream& operator<<(ostream& stream, Element& elem);

protected:    

  virtual void setFromMyNodes() = 0;

  virtual void setFaceFromNodes(int num, Node** nodes) = 0;

  void setFace(int num, Face* face);
  
  Type d_eType;

  int d_ID;

  Node ** d_nodes;
  Face ** d_faces;

  int d_materialType;

  static Mesh* s_mesh;
  


};

inline int Element::getID() const
{ return d_ID; }

inline void Element::setID(int theID)
{ d_ID = theID; }

inline Node** Element::getNodes()
{ return d_nodes; }

inline Face** Element::getFaces()
{ return d_faces; }

inline Element::Type Element::getElementType() const
{ return d_eType; }

inline boolean Element::isCohesive() const { 
  return ( d_eType == e_tri_cohesive || d_eType == e_quad_cohesive 
	   ? TRUE
	   : FALSE );
}

inline int  Element::getMaterialType() const
{ return d_materialType; }

inline void  Element::setMaterialType( int mtype )
{ d_materialType = mtype; }

inline void Element::setMesh( Mesh* emesh ) 
{ s_mesh =  emesh; }

inline void Element::setFace(int num, Face* face){
  d_faces[num] = face;
  face->addElement( this );
}

#endif //ELEMENT_H

