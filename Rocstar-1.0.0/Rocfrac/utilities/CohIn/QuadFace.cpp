/* Generated by Together */

#include "QuadFace.hpp"
#include "QCoElement.hpp"

QuadFace::QuadFace(Node * * theNodes) : 
  Face( e_quad )
{
  d_nodes = new Node*[4];
  int i;
  for( i = 0; i < 4; i++ ){
    d_nodes[i] = theNodes[i];
    d_nodes[i]->addFace( this );
  }
}

QuadFace::QuadFace()
{
  d_nodes = new Node*[4];
  int i;
  for( i = 0; i < 4; i++ ){
    d_nodes[i] = 0;
  }
}


QuadFace::~QuadFace(){

  int i;
  for( i = 0; i < 4; i++ ){
    d_nodes[i]->removeFace( this );
  }
}

int QuadFace::getNumNodes() const
{ return 4;}


Element* QuadFace::buildCohesive( Element* side_elem, Node* node, 
				 Node* new_node ){

  int ind;
  int i;
  for( i = 0; i < 4; i++ ){
    if( d_nodes[i] == node ){
      ind = i;
      break;
    }
  }
  Element* coelem;

  Node* new_nodes[8];
  if( d_E1 == side_elem ){ // normal to side
    new_nodes[0] = d_nodes[0];
    new_nodes[1] = d_nodes[1];
    new_nodes[2] = d_nodes[2];
    new_nodes[3] = d_nodes[3];
    new_nodes[4] = (ind == 0 ? new_node : d_nodes[0] );
    new_nodes[5] = (ind == 1 ? new_node : d_nodes[1] );
    new_nodes[6] = (ind == 2 ? new_node : d_nodes[2] );
    new_nodes[7] = (ind == 3 ? new_node : d_nodes[3] );
    d_E1 = d_E2;
    d_E2 = 0;
    coelem = new QCoElement( new_nodes );
    // now for this face set E1 to  the coelem
    d_E2 = d_E1; 
    d_E1 = coelem;
    Face* oface = coelem->getFaces()[1];
    ((QuadFace*)oface)->d_E2 = side_elem;
  }
  else { // normal to the other side
    d_E2 = 0; 
    new_nodes[0] = (ind == 0 ? new_node : d_nodes[0] );
    new_nodes[1] = (ind == 1 ? new_node : d_nodes[1] );
    new_nodes[2] = (ind == 2 ? new_node : d_nodes[2] );
    new_nodes[3] = (ind == 3 ? new_node : d_nodes[3] );
    new_nodes[4] = d_nodes[0];
    new_nodes[5] = d_nodes[1];
    new_nodes[6] = d_nodes[2];
    new_nodes[7] = d_nodes[3];
    coelem = new QCoElement( new_nodes );
    // now for the new face set E2 to side_elem (will correct the nodes later)
    Face* oface = coelem->getFaces()[0];
    ((QuadFace*)oface)->d_E2 = side_elem;
  }
  return coelem;
}
