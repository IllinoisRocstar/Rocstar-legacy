#!/bin/csh
#
# mftp_put
#
# Transfer multiple output dumps to mass storage.
#
# This version supports both LLNL and NCSA mass storage systems.
#
# NOTE: for NCSA's UniTree, you must already have obtained a
#       Kerberos ticket using the kinit command.
#
# This version transfers each group of files (e.g, fluid_*)
# at one output time as a separate tar file.
#
# On mass storage, you must already have created the diretory tree
# under the directory named what you will enter here for the
# "remote directory":
#
# REMOTE_DIR: {Rocflo OR Rocflu}/HDFout 
#             {Rocfrac OR Rocsolid}/HDFout 
#             {RocburnAPN OR RocburnPY}/HDFout
#
# You must invoke this script with the GENx run directory
# as the current directory:
#
# DIR: {Rocflo OR Rocflu}/HDFout
#      {Rocfrac OR Rocsolid}/HDFout
#      {RocburnAPN OR RocburnPY}/HDFout
#
# If you have more than one type of fluid, solid, or burn
# directory, it will only go into one of them -- e.g., it will
# not try to save files for both Rocflo and Rocflu.
#
# This version supports fluids-only runs, provided the Rocfrac
# or Rocsolid HDFout directory does not exist or is empty.
#
# This version also supports solid-only runs.
#
# See also the script used to retrieve dumps in the tar files, mftp_get.
#
# Written by Robert Fiedler, revised for GEN2.5 2/23/04.

# Determine what machine this is (short name).

if (! $?HOST) then
  set HOST = `hostname -s`
else
  set HOST = `echo $HOST | sed -e 's/\..*//'`
endif

if ($HOST == "blue" || $HOST == "frost" || $HOST == "alc") then
  set MASS_STORE = "storage" 
  set CENTER = "LLNL"
else
  set MASS_STORE = "mss.ncsa.uiuc.edu"
  set CENTER = "NCSA"
endif

set DIR = `pwd`

echo -n "Enter suffix on HDFout directory names, if any (default=): "
set SUFFIX = "$<"
if ("$SUFFIX" == "") then
  set HDFOUT = "HDFout"
else
  set HDFOUT = "HDFout_${SUFFIX}"
endif

set FDIR = "Rocflo/$HDFOUT"
if (! -d $FDIR) then
  set FDIR = "Rocflu/$HDFOUT"
  if (! -d $FDIR) then
    echo ""
    echo "Cannot find Rocflo or Rocflu $HDFOUT directory"
    echo ""
  else
    set TDIR = $FDIR
    set TMAT = fluid
  endif
else
  set TDIR = $FDIR
  set TMAT = fluid
endif
echo ""
echo "Fluids directory is $FDIR"

set SDIR = "Rocfrac/$HDFOUT"
if (! -d $SDIR) then
  set SDIR = "Rocsolid/$HDFOUT"
  if (! -d $SDIR) then
    echo ""
    echo "Cannot find Rocsolid or Rocfrac $HDFOUT directory"
    echo ""
  else
    if (! $?TDIR) then
      set TDIR = $SDIR
      set TMAT = solid
    endif
  endif
else
  if (! $?TDIR) then
    set TDIR = $SDIR
    set TMAT = solid
  endif
endif
if (-d $SDIR) then
  echo ""
  echo "Solids directory is $SDIR"
endif

set BDIR = "RocburnAPN/$HDFOUT"
if (! -d $BDIR) then
  set BDIR = "RocburnPY/$HDFOUT"
  if (! -d $BDIR) then
    echo ""
    echo "Cannot find RocburnAPN or RocburnPY $HDFOUT directory"
    echo ""
  endif
endif
if (-d $BDIR) then
  echo ""
  echo "Burn directory is $BDIR"
endif
echo ""

if ($CENTER == "LLNL") then
  set Remote_dir = /users/u43/$USER/GEN2.5/RSRM/480procs_coupled_021704
else
  set Remote_dir = /u/ac/$USER/CSAR/GEN2.5/Inhibitor/060procs_coupled_021804
endif
echo -n "Enter directory on $MASS_STORE (${Remote_dir}): "
set REMOTE_DIR = "$<"
if ("$REMOTE_DIR" == "") then
  set REMOTE_DIR = $Remote_dir
endif

echo ""
echo "Getting output dump times ... "
#
# Assume the directory has a huge number of files, so ls and
# any pattern matching takes several minutes.  It can be much more
# efficient to save the output of a plain ls to a file, and do
# pattern matching in the file (grep) to get the desired file names.
#
cd $TDIR
set TFILES = $HOME/${TMAT}_file_list_$REMOTE_DIR:t
if (-e $TFILES) then
  echo -n "File list $TFILES exists.  Should I use it (y/n default=y): "
  set RESPONSE = "$<"
  if ("$RESPONSE" == "") then
    set RESPONSE = y
  endif
  if ("$RESPONSE" == "n") then
    ls > $TFILES
  endif 
else
  echo "Getting list of $TMAT files ... "
  ls > $TFILES
endif
echo ""
echo "Note that the transfer.nnn script I will write and execute needs"
echo "the file lists to run."

set PANDA = "y"
set DOT = ""
set optimes = (`grep '^'"${TMAT}"'_..\......._000\.hdf$' $TFILES | sed -e "s/${TMAT}_//" | sed -e 's/.....hdf//'`)
if ($#optimes == 0) then
  echo ""
  echo "No HDF dumps written by Rocpanda found.  Looking for Rochdf output ..."
  echo ""
  set PANDA = "n"
  set DOT = "."
  set optimes = (`grep '^'"${TMAT}"'_..\......._0000\.hdf$' $TFILES | sed -e "s/${TMAT}_//" | sed -e 's/......hdf//'`)
  if ($#optimes == 0) then
    echo ""
    echo "No output dumps found"
    echo ""
    exit
  else
    set Files_per_dump = (`grep '^'"${TMAT}_${optimes[1]}_${DOT}"'...\.hdf$' $TFILES | wc -l`) 
  endif
else
  set Files_per_dump = (`grep '^'"${TMAT}_${optimes[1]}_${DOT}"'...\.hdf$' $TFILES | wc -l`) 
endif
set files_per_dump = $Files_per_dump[1]
echo ""
echo "There are $files_per_dump files per dump"
if ($files_per_dump > 1000) then
  echo ""
  echo "This script can handle only up to 1000"
  exit
endif
echo ""

echo "Output times are:"
echo ""
set i = 1
LOOP:
  echo "$i   $optimes[$i]"
  if ($i < $#optimes) then
    @ i++
    goto LOOP
  endif
#
echo ""
echo -n "Enter index of first time to transfer (1): "
set ifirst = "$<"
if ("$ifirst" == "") then
  set ifirst = 1
endif
echo -n "Enter index of last time to transfer ($#optimes): "
set ilast = "$<"
if ("$ilast" == "") then
  set ilast = $#optimes
endif
echo -n "Should I ask for verification to transfer each dump (y/n default = n): "
set VERIFY = "$<"
if ("$VERIFY" == "") then
  set VERIFY = "n"
endif
echo ""
echo "VERIFY is $VERIFY"

if ("$TDIR" != "$FDIR") then
  set SFILES = $TFILES
  set SOLID = (`grep '^solid_'"${optimes[1]}_${DOT}"'...\.hdf$' $SFILES | wc -l`)
  if (-d $DIR/$FDIR) then
    cd $DIR/$FDIR
    set FFILES = $HOME/fluid_file_list_$REMOTE_DIR:t
    if (-e $FFILES) then
      echo ""
      echo -n "File list $FFILES exists.  Should I use it (y/n default=y): "
      set RESPONSE = "$<"
      if ("$RESPONSE" == "") then
        set RESPONSE = y
      endif
      if ("$RESPONSE" == "n") then
        echo ""
        ls > $FFILES
      endif 
    else
      echo ""
      echo "Getting list of fluid files ... "
      ls > $FFILES
    endif
    set FLUID = (`grep '^fluid_'"${optimes[1]}_${DOT}"'...\.hdf$' $FFILES | wc -l`)
  else
    set FLUID = ""
  endif
else
  set FFILES = $TFILES
  set FLUID = (`grep '^fluid_'"${optimes[1]}_${DOT}"'...\.hdf$' $FFILES | wc -l`)
  if (-d $DIR/$SDIR) then
    cd $DIR/$SDIR
    set SFILES = $HOME/solid_file_list_$REMOTE_DIR:t
    if (-e $SFILES) then
      echo ""
      echo -n "File list $SFILES exists.  Should I use it (y/n default=y): "
      set RESPONSE = "$<"
      if ("$RESPONSE" == "") then
        set RESPONSE = y
      endif
      if ("$RESPONSE" == "n") then
        echo ""
        ls > $SFILES
      endif 
    else
      echo ""
      echo "Getting list of solid files ... "
      ls > $SFILES
    endif
    set SOLID = (`grep '^solid_'"${optimes[1]}_${DOT}"'...\.hdf$' $SFILES | wc -l`)
  else
    set SOLID = ""
  endif
endif

if (-d $DIR/$BDIR) then
  cd $DIR/$BDIR
  set BFILES = $HOME/burn_file_list_$REMOTE_DIR:t
  if (-e $BFILES) then
    echo ""
    echo -n "File list $BFILES exists.  Should I use it (y/n default=y): "
    set RESPONSE = "$<"
    if ("$RESPONSE" == "") then
      set RESPONSE = y
    endif
    if ("$RESPONSE" == "n") then
      echo ""
      ls > $BFILES
    endif 
  else
    echo ""
    echo "Getting list of burn files ... "
    ls > $BFILES
  endif
  set BURN = (`grep '^burn_'"${optimes[1]}_${DOT}"'...\.hdf$' $BFILES | wc -l`)
else
  set BURN = ""
endif

# Create a script that does the work.

set SCRIPT = $HOME/transfer.$$
echo "#\!/bin/csh" > $SCRIPT
if ($CENTER != "LLNL") then
  echo "ftp -iv $MASS_STORE << STOP">> $SCRIPT
endif

set i = $ifirst
LOOP2:
  echo ""
  set optime = $optimes[$i]
  if ("$VERIFY" == "n") then
    set TRANSFER = "y"
    echo "Transferring $optime"
  else
    echo -n "Should I transfer dump $optime ? (y/n default = n): "
    set TRANSFER = "$<"
    if ("$TRANSFER" == "") then
      set TRANSFER = "n"
    endif
  endif

  if ("$TRANSFER" == "y") then

    if ("$FLUID" != "") then
      echo "cd $DIR/$FDIR"
      cd $DIR/$FDIR
      if ($CENTER == "LLNL") then
        echo "cd $DIR/$FDIR" >> $SCRIPT
        set RD = $REMOTE_DIR/$FDIR
        echo htar cvf ${RD}/fluid_${optime}.tar '`'grep "'"^f..'*'${optime}_0${DOT}..'\'.hdf'$'"'" $FFILES'`' >> $SCRIPT
        echo htar cvf ${RD}/ifluid_${optime}.tar '`'grep "'"^if..'*'${optime}_0${DOT}..'\'.hdf'$'"'" $FFILES'`' >> $SCRIPT
      else
        echo "lcd $DIR/$FDIR" >> $SCRIPT
        echo "cd $REMOTE_DIR/$FDIR" >> $SCRIPT
        echo put '"|'tar cvf - '`'grep "'"^f..'*'${optime}_0${DOT}..'\'.hdf'$'"'" $FFILES'`"' fluid_${optime}.tar >> $SCRIPT
        echo put '"|'tar cvf - '`'grep "'"^if..'*'${optime}_0${DOT}..'\'.hdf'$'"'" $FFILES'`"' ifluid_${optime}.tar >> $SCRIPT
      endif
    endif

    if ("$SOLID" != "") then
      echo "cd $DIR/$SDIR"
      cd $DIR/$SDIR
      if ($CENTER == "LLNL") then
        echo "cd $DIR/$SDIR" >> $SCRIPT
        set RD = $REMOTE_DIR/$SDIR
        echo htar cvf ${RD}/solid_${optime}.tar '`'grep "'"^s..'*'${optime}_0${DOT}..'\'.hdf'$'"'" $SFILES'`' >> $SCRIPT
        echo htar cvf ${RD}/isolid_${optime}.tar '`'grep "'"^is..'*'${optime}_0${DOT}..'\'.hdf'$'"'" $SFILES'`' >> $SCRIPT
      else
        echo "lcd $DIR/$SDIR" >> $SCRIPT
        echo "cd $REMOTE_DIR/$SDIR" >> $SCRIPT
        echo put '"|'tar cvf - '`'grep "'"^s..'*'${optime}_0${DOT}..'\'.hdf'$'"'" $SFILES'`"' solid_${optime}.tar >> $SCRIPT
        echo put '"|'tar cvf - '`'grep "'"^is..'*'${optime}_0${DOT}..'\'.hdf'$'"'" $SFILES'`"' isolid_${optime}.tar >> $SCRIPT
      endif
    endif

    if ("$BURN" != "") then
      echo "cd $DIR/$BDIR"
      cd $DIR/$BDIR
      if ($CENTER == "LLNL") then
        echo "cd $DIR/$BDIR" >> $SCRIPT
        set RD = $REMOTE_DIR/$BDIR
        echo htar cvf ${RD}/burn_${optime}.tar '`'grep "'"^b..'*'${optime}_0${DOT}..'\'.hdf'$'"'" $BFILES'`' >> $SCRIPT
        echo htar cvf ${RD}/iburn_${optime}.tar '`'grep "'"^ib..'*'${optime}_0${DOT}..'\'.hdf'$'"'" $BFILES'`' >> $SCRIPT
      else
        echo "lcd $DIR/$BDIR" >> $SCRIPT
        echo "cd $REMOTE_DIR/$BDIR" >> $SCRIPT
        echo put '"|'tar cvf - '`'grep "'"^b..'*'${optime}_0${DOT}..'\'.hdf'$'"'" $BFILES'`"' burn_${optime}.tar >> $SCRIPT
        echo put '"|'tar cvf - '`'grep "'"^ib..'*'${optime}_0${DOT}..'\'.hdf'$'"'" $BFILES'`"' iburn_${optime}.tar >> $SCRIPT
      endif
    endif

  endif

  if ($i < $ilast) then
    @ i++
    goto LOOP2
  endif

if ($CENTER != "LLNL") then
  echo "bye" >> $SCRIPT
  echo "STOP" >> $SCRIPT
endif
echo "exit" >> $SCRIPT

echo ""
echo -n "Should I execute the script $SCRIPT ? (y/n default = y): "
set RESPONSE = "$<"
if ("$RESPONSE" == "") then
  set RESPONSE = "y"
endif
if ("$RESPONSE" == "y") then

# Invoke the script

  echo ""
  echo "Starting the script to transfer the files"
  echo ""
  chmod u+x $SCRIPT
  $SCRIPT

endif

echo ""
echo -n "Should I remove the script $SCRIPT ? (y/n default = y): "
set RESPONSE = "$<"
if ("$RESPONSE" == "") then
  set RESPONSE = "y"
endif
if ("$RESPONSE" == "y") then
  \rm -f $SCRIPT
  endif

exit
