cmake_minimum_required(VERSION 2.8)
project(ElmerModuleDriver)

# Compiled objects output paths
set (EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin CACHE PATH "Single directory for all executables.")
set (LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/lib CACHE PATH "Single directory for all libraries and archives.")
mark_as_advanced (LIBRARY_OUTPUT_PATH EXECUTABLE_OUTPUT_PATH)
# Set up RPATH
SET(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/lib")
SET(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)

# 
# ========= USE IN EXISTING PROJECT ============
#
# In order to use this IllinoisRocstar Project Template
# in an existing project COPY this file from this point
# on and paste it into your project's CMakeLists.txt 
# file *before* your existing INSTALL directives.
#
INCLUDE(CTest)
IF(BUILD_TESTING)
  SET(BUILDNAME "${BUILDNAME}" CACHE STRING "Name of build on the dashboard")
  MARK_AS_ADVANCED(BUILDNAME)
ENDIF(BUILD_TESTING)

ADD_SUBDIRECTORY(IRAD)

find_package(MPI)
IF(MPI_CXX_COMPILER)
  set (CMAKE_CXX_COMPILER ${MPI_CXX_COMPILER})
ENDIF()

# Project-specific constructs
include_directories(include IRAD/include)

ADD_LIBRARY(ElmerModuleDriver SHARED src/ExampleSourceFile.C)
TARGET_LINK_LIBRARIES(ElmerModuleDriver IRAD)
ADD_EXECUTABLE(elmermoduledriver_test src/TestElmerModuleDriver.C)
TARGET_LINK_LIBRARIES(elmermoduledriver_test ElmerModuleDriver)
ADD_EXECUTABLE(sep src/ExampleSerialProgram.C src/sep.C)
TARGET_LINK_LIBRARIES(sep ElmerModuleDriver)
ADD_EXECUTABLE(make_project src/MakeProject.C)
TARGET_LINK_LIBRARIES(make_project ElmerModuleDriver)

IF(MPI_CXX_COMPILER)
  ADD_DEFINITIONS(-D_ELMERMODULEDRIVER_PARALLEL_)
  ADD_EXECUTABLE(pepi src/ExampleParallelProgram.C src/pepi.C)
  TARGET_LINK_LIBRARIES(pepi ElmerModuleDriver)
  ADD_EXECUTABLE(elmermoduledriver_parallel_test src/ParallelTestElmerModuleDriver.C)
  TARGET_LINK_LIBRARIES(elmermoduledriver_parallel_test ElmerModuleDriver)
ENDIF()

# Information for ElmerModuleDriver CMake
FIND_LIBRARY(IMPACT_LIBF SITCOMF)
FIND_LIBRARY(IMPACT_LIB SITCOM)
FIND_FILE(IMPACT_HDR comf90.h)
GET_FILENAME_COMPONENT(IMPACT_LIBPATH ${IMPACT_LIB} PATH)
GET_FILENAME_COMPONENT(IMPACT_INCPATH ${IMPACT_HDR} PATH)
include_directories(${IMPACT_INCPATH})

FIND_LIBRARY(IRAD_LIB IRAD)
FIND_FILE(IRAD_HDR COMM.H)
FIND_PROGRAM(RUNTEST runtest)
FIND_PROGRAM(TESTRESULT testresults)
GET_FILENAME_COMPONENT(IRAD_LIBPATH ${IRAD_LIB} PATH)
GET_FILENAME_COMPONENT(IRAD_INCPATH ${IRAD_HDR} PATH)
GET_FILENAME_COMPONENT(IRAD_EXEPATH ${RUNTEST} PATH)
include_directories(${IRAD_INCPATH})

FIND_LIBRARY(MATC_LIB matc)
FIND_LIBRARY(HUTI_LIB huti)
FIND_LIBRARY(ARPACK_LIB arpack)
FIND_LIBRARY(PARPACK_LIB parpack)
FIND_LIBRARY(BINIO_LIB binio)
FIND_LIBRARY(ELMER_LIB elmersolver)

FIND_LIBRARY(SOLVER_LIB SolverModule)
message("SOLVER_LIB = ${SOLVER_LIB}")
message("IMPACT_LIB = ${IMPACT_LIB}")

add_executable(SolverModuleDriver src/SolverModuleDriver.C)
target_link_libraries(SolverModuleDriver ${SOLVER_LIB} ${IRAD_LIB}
${IMPACT_LIBF} ${IMPACT_LIB} ${ELMER_LIB} ${MATC_LIB} ${HUTI_LIB}
${ARPACK_LIB} ${PARPACK_LIB} ${BINIO_LIB})

# Add target to build the documentation
#option(BUILD_DOCUMENTATION "Create and install the HTML based API documentation (requires Doxygen)" ON)
#IF(BUILD_DOCUMENTATION)
#
#  FIND_PACKAGE(Doxygen)
#  IF(NOT DOXYGEN_FOUND)
#    MESSAGE(FATAL_ERROR "Doxygen is needed to build the documentation.")
#  ENDIF()
#  
##  FILE(COPY ${CMAKE_CURRENT_SOURCE_DIR}/doc DESTINATION ${CMAKE_CURRENT_BINARY_DIR})
#  
#  
#  SET( doxyfile_in          ${CMAKE_CURRENT_SOURCE_DIR}/doc/ElmerModuleDriver.cfg.in )
#  SET( doxyfile             ${CMAKE_CURRENT_BINARY_DIR}/ElmerModuleDriver.cfg        )
#  SET( documentation        ${CMAKE_CURRENT_BINARY_DIR}/docs                 )
#
#  CONFIGURE_FILE( ${doxyfile_in} ${doxyfile} @ONLY )
#
#  ADD_CUSTOM_COMMAND( OUTPUT ${documentation}
#                      COMMAND ${DOXYGEN_EXECUTABLE} ${doxyfile}
#                      MAIN_DEPENDENCY ${doxyfile} ${doxyfile_in}
#                      DEPENDS ElmerModuleDriver ${doxy_extra_files}
#                      COMMENT "Generating documentation")
#
#  ADD_CUSTOM_TARGET( docs DEPENDS ${documentation} )
#
#  INSTALL( DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/docs DESTINATION share/ElmerModuleDriver )
#ENDIF()

# The 3 tests below actually run all the tests
ADD_TEST(RunElmerModuleDriverUnitTests ${EXECUTABLE_OUTPUT_PATH}/elmermoduledriver_test -o elmermoduledriver_testresults.txt)
ADD_TEST(RunTestScripts ${EXECUTABLE_OUTPUT_PATH}/runtest -l ${PROJECT_SOURCE_DIR}/share/Testing/test_scripts/tests.list -o elmermoduledriver_testresults.txt)
ADD_TEST(RunPlatformSpecificTests ${EXECUTABLE_OUTPUT_PATH}/runtest -p ${PROJECT_SOURCE_DIR}/share/Platforms/platforms -o elmermoduledriver_testresults.txt)
ADD_TEST(RunSpecificTestScript    ${EXECUTABLE_OUTPUT_PATH}/runtest -f ${PROJECT_SOURCE_DIR}/share/Platforms/test_stub.csh -o elmermoduledriver_testresults.txt)

# Simple test of return code of a program
ADD_TEST(ExampleProgram:Runs ${EXECUTABLE_OUTPUT_PATH}/sep CMakeCache.txt)

# The remaining "tests" just use the "testresults" utility to check the results of the tests run above
ADD_TEST(TestStubWorks ${EXECUTABLE_OUTPUT_PATH}/testresults TestStubWorks elmermoduledriver_testresults.txt)
ADD_TEST(ExampleProgram:Works ${EXECUTABLE_OUTPUT_PATH}/testresults ExampleProgram:Works elmermoduledriver_testresults.txt)
ADD_TEST(ExampleFunction:Works ${EXECUTABLE_OUTPUT_PATH}/testresults ExampleFunction:Works elmermoduledriver_testresults.txt)
ADD_TEST(TrapezoidQuadrature:Runs ${EXECUTABLE_OUTPUT_PATH}/testresults TrapezoidQuadrature:Runs elmermoduledriver_testresults.txt)
ADD_TEST(TrapezoidQuadrature:Accurate ${EXECUTABLE_OUTPUT_PATH}/testresults TrapezoidQuadrature:Accurate elmermoduledriver_testresults.txt)
ADD_TEST(TrapezoidQuadrature:Order ${EXECUTABLE_OUTPUT_PATH}/testresults TrapezoidQuadrature:Order2 elmermoduledriver_testresults.txt)
ADD_TEST(MidPointQuadrature:Runs ${EXECUTABLE_OUTPUT_PATH}/testresults MidPointQuadrature:Runs elmermoduledriver_testresults.txt)
ADD_TEST(MidPointQuadrature:Accurate ${EXECUTABLE_OUTPUT_PATH}/testresults MidPointQuadrature:Accurate elmermoduledriver_testresults.txt)
ADD_TEST(MidPointQuadrature:Order ${EXECUTABLE_OUTPUT_PATH}/testresults MidPointQuadrature:Order2 elmermoduledriver_testresults.txt)

IF(MPI_CXX_COMPILER)
  # The parallel tests are actually run by this command
  ADD_TEST(RunParallelPlatformTests ${EXECUTABLE_OUTPUT_PATH}/runtest -p ${PROJECT_SOURCE_DIR}/share/Platforms/parallel_platforms -o elmermoduledriver_testresults.txt)
  # The remainder use "testresults" utility to check the results of the parallel tests run above
  ADD_TEST(ParallelExample:Runs ${EXECUTABLE_OUTPUT_PATH}/testresults PEPI:Runs elmermoduledriver_testresults.txt)
  ADD_TEST(ParallelExample:Works ${EXECUTABLE_OUTPUT_PATH}/testresults PEPI:Works elmermoduledriver_testresults.txt)
  ADD_TEST(ParallelTrapezoidQuadrature:Runs ${EXECUTABLE_OUTPUT_PATH}/testresults ParallelTrapezoidQuadrature:Runs elmermoduledriver_testresults.txt)
  ADD_TEST(ParallelTrapezoidQuadrature:Accurate ${EXECUTABLE_OUTPUT_PATH}/testresults ParallelTrapezoidQuadrature:Accurate elmermoduledriver_testresults.txt)
  ADD_TEST(ParallelTrapezoidQuadrature:Order ${EXECUTABLE_OUTPUT_PATH}/testresults ParallelTrapezoidQuadrature:Order2 elmermoduledriver_testresults.txt)
  ADD_TEST(ParallelTrapezoidQuadrature:WeakScaling ${EXECUTABLE_OUTPUT_PATH}/testresults ParallelTrapezoidQuadrature:WeakScaling elmermoduledriver_testresults.txt)
  ADD_TEST(ParallelTrapezoidQuadrature:StrongScaling ${EXECUTABLE_OUTPUT_PATH}/testresults ParallelTrapezoidQuadrature:StrongScaling elmermoduledriver_testresults.txt)
  ADD_TEST(ParallelMidPointQuadrature:Runs ${EXECUTABLE_OUTPUT_PATH}/testresults ParallelMidPointQuadrature:Runs elmermoduledriver_testresults.txt)
  ADD_TEST(ParallelMidPointQuadrature:Accurate ${EXECUTABLE_OUTPUT_PATH}/testresults ParallelMidPointQuadrature:Accurate elmermoduledriver_testresults.txt)
  ADD_TEST(ParallelMidPointQuadrature:Order ${EXECUTABLE_OUTPUT_PATH}/testresults ParallelMidPointQuadrature:Order2 elmermoduledriver_testresults.txt)
  ADD_TEST(ParallelMidPointQuadrature:WeakScaling ${EXECUTABLE_OUTPUT_PATH}/testresults ParallelMidPointQuadrature:WeakScaling elmermoduledriver_testresults.txt)
  ADD_TEST(ParallelMidPointQuadrature:StrongScaling ${EXECUTABLE_OUTPUT_PATH}/testresults ParallelMidPointQuadrature:StrongScaling elmermoduledriver_testresults.txt)
ENDIF()

INSTALL(TARGETS ElmerModuleDriver sep elmermoduledriver_test RUNTIME DESTINATION bin LIBRARY DESTINATION lib ARCHIVE DESTINATION lib)
IF(MPI_CXX_COMPILER)
  INSTALL(TARGETS pepi elmermoduledriver_parallel_test RUNTIME DESTINATION bin LIBRARY DESTINATION lib ARCHIVE DESTINATION lib)
ENDIF()
# ========= USE IN EXISTING PROJECT ==============
