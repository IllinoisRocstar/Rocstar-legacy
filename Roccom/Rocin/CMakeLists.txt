cmake_minimum_required (VERSION 2.8)
project(Rocin)
#ENABLE_LANGUAGE( CXX Fortran )
#include(FortranCInterface)
#FortranCInterface_HEADER(${PROJECT_SOURCE_DIR}/include/FC.h MACRO_NAMESPACE "FC_")
#FortranCInterface_VERIFY(CXX QUIET)
#set (BUILD_STATIC FALSE CACHE BOOL "Build static COM library")
set (ENABLE_CGNS FALSE CACHE BOOL "Build with CGNS Support")
set (NOGLOB      FALSE CACHE BOOL "Build without glob file search - turn this on to support massive parallelism.")
set (USE_PTHREADS FALSE CACHE BOOL "Build threaded library.")
#set (EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin CACHE PATH "Single directory for all executables.")
#set (LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/lib CACHE PATH "Single directory for all libraries and archives.")
#mark_as_advanced (LIBRARY_OUTPUT_PATH EXECUTABLE_OUTPUT_PATH)
load_cache(../)
IF(NOT ENABLE_MPI)
  add_definitions( -DDUMMY_MPI )
ELSE()
  FIND_PACKAGE(MPI REQUIRED)
  add_definitions( -DMPICH_IGNORE_CXX_SEEK )
#  IF(MPI_CXX_COMPILER)
#    set (CMAKE_CXX_COMPILER ${MPI_CXX_COMPILER})
#  ENDIF(MPI_CXX_COMPILER)
ENDIF()
IF(ENABLE_CGNS)
  add_definitions ( -DUSE_CGNS )
ENDIF()
IF(NOGLOB)
  add_definitions( -D_NO_GLOB_ )
ENDIF()
IF(USE_PTHREADS)
  add_definitions( -DUSE_PTHREADS )
ENDIF()

#INCLUDE(CTest)

#find_library(DL_LIB dl)
find_library(CGNS_LIB cgns)
find_path(CGNS_INC cgnslib.h)
find_library(HDF4_LIB df HINTS /usr/lib/hdf /usr/lib64/hdf)
find_library(MFHDF_LIB mfhdf HINTS /usr/lib/hdf /usr/lib64/hdf)
find_library(ZLIB z)
find_path(HDF4_INC hdf.h HINTS /usr/include/hdf)
find_library(JPEG_LIB jpeg)
find_library(PTHREAD_LIB pthread)

set (ROCIN_SRCS src/Rocin.C src/read_parameter_file.C)
IF(NOGLOB)
  set (ROCIN_SRCS ${ROCIN_SRCS} src/Directory.C)
ENDIF()
set (TEST_SRCS test/intest1.C test/intest2.C test/printin.C test/param_test.C)
set (UTIL_SRCS util/hdf2plt.C util/printfeas.C util/hdf2vtk util/hdf2pltV2 util/sepin util/plagprep)
set (RHDF4_SRCS src/HDF4.C)
IF(USE_PTHREADS)
set (RHDF4_SRCS ${RHDF4_SRCS} src/Sync.C)
ENDIF()
set (ALL_SRCS "${ROCIN_SRCS} ${TEST_SRCS} ${UTIL_SRCS} ${RHDF4_SRCS}")
set(LIB_SRCS ${ROCIN_SRCS})
#set (TEST_SRCS test/maptest.C)
set_source_files_properties(${ALL_SRCS} PROPERTIES COMPILE_FLAGS "-fPIC" )
#set(TEST_SRCS src/COMTest.C)

# rpath settings
SET(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/lib")
SET(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)

include_directories(include ${HDF4_INC})

IF(NOT BUILD_STATIC)
  add_library(Rocin SHARED ${ROCIN_SRCS})
  add_library(RHDF4 SHARED ${RHDF4_SRCS})
  target_link_libraries(RHDF4 ${HDF4_LIB} ${MFHDF_LIB} ${JPEG_LIB} ${ZLIB})
  target_link_libraries(Rocin RHDF4)
ELSE()
  add_library(Rocin STATIC "${ROCIN_SRCS} ${RHDF4_SRCS}")
  add_definitions( -DSTATIC_LINK )
  target_link_libraries(Rocin ${HDF4_LIB} ${MHDF_LIB} ${JPEG_LIB} ${ZLIB})
ENDIF()
IF(USE_CGNS)
  target_link_libraries(Rocin ${CGNS_LIB})
ENDIF()
target_link_libraries(Rocin Roccom)
IF(USE_PTHREADS)
  target_link_libraries(Rocin PTHREAD_LIB)
ENDIF()

# Test executables
add_executable(intest1 test/intest1.C)
target_link_libraries(intest1 Rocin)
add_executable(intest2 test/intest2.C)
target_link_libraries(intest2 Rocin)
add_executable(printin test/printin.C)
target_link_libraries(printin Rocin)
add_executable(param_test test/param_test.C)
target_link_libraries(param_test Rocin)

# Utilities
add_executable(hdf2plt util/hdf2plt.C)
target_link_libraries(hdf2plt Rocin)
add_executable(printfeas util/printfeas.C)
target_link_libraries(printfeas Rocin)
add_executable(hdf2vtk util/hdf2vtk.C)
target_link_libraries(hdf2vtk Rocin)
#add_executable(hdf2pltV2 util/hdf2pltV2.C)
#target_link_libraries(hdf2pltV2 Rocin)
add_executable(sepin util/sepin.C)
target_link_libraries(sepin Rocin)
add_executable(plagprep util/plagprep.C)
target_link_libraries(plagprep Rocin)

#ADD_TEST(RunAllTests ${EXECUTABLE_OUTPUT_PATH}/testx testresults.txt)
#ADD_TEST(TestObject:ValidHandle ${TEST_RESULTS} TestObject:ValidHandle testresults.txt)
#ADD_TEST(TestObject:Exists ${TEST_RESULTS} TestObject:Exists testresults.txt)

INSTALL(TARGETS RHDF4 Rocin hdf2plt printfeas hdf2vtk sepin plagprep RUNTIME DESTINATION bin LIBRARY DESTINATION lib ARCHIVE DESTINATION lib)
